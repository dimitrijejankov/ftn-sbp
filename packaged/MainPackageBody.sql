create or replace PACKAGE BODY PR_MAIN_PACKAGE AS

FUNCTION FN_ACCOUNT_EXISTS(SOURCE IN TG_PARENT_ACCOUNT_PACKAGE.ACCOUNT_ID_T)
RETURN BOOLEAN IS
ENT_COUNT NUMBER(6);
BEGIN
  SELECT COUNT(*) INTO ENT_COUNT FROM "Account" a WHERE a.AC_ID = SOURCE.AC_ID AND a.CA_ID=SOURCE.CA_ID;
  IF ENT_COUNT = 0 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;
END FN_ACCOUNT_EXISTS;

FUNCTION FN_CHILD_ACCOUNT_EXISTS(SOURCE IN TG_PARENT_ACCOUNT_PACKAGE.ACCOUNT_ID_T)
RETURN BOOLEAN IS
ENT_COUNT NUMBER(6);
BEGIN
  SELECT COUNT(*) INTO ENT_COUNT FROM "Account" a WHERE a.AC_ID LIKE (SOURCE.AC_ID || '_') AND a.CA_ID=SOURCE.CA_ID;
  IF ENT_COUNT = 0 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;
END FN_CHILD_ACCOUNT_EXISTS;

FUNCTION FN_ENTRY_EXISTS(SOURCE IN TG_PARENT_ACCOUNT_PACKAGE.ACCOUNT_ID_T)
RETURN BOOLEAN IS
ENT_COUNT NUMBER(6);
BEGIN
  SELECT COUNT(*) INTO ENT_COUNT FROM "Vaucher Entry" v WHERE v.AC_ID = SOURCE.AC_ID AND v.CA_ID=SOURCE.CA_ID;
  IF ENT_COUNT = 0 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;
END FN_ENTRY_EXISTS;

FUNCTION FN_JVT_ENTRY_EXISTS(SOURCE IN TG_PARENT_ACCOUNT_PACKAGE.ACCOUNT_ID_T)
RETURN BOOLEAN IS
ENT_COUNT NUMBER(6);
BEGIN
  SELECT COUNT(*) INTO ENT_COUNT FROM "Journal Vaucher Template Entry" v WHERE v.AC_ID = SOURCE.AC_ID AND v.CA_ID=SOURCE.CA_ID;
  IF ENT_COUNT = 0 THEN
    RETURN FALSE;
  ELSE
    RETURN TRUE;
  END IF;
END FN_JVT_ENTRY_EXISTS;

FUNCTION FN_TABLE_HAS_INDEX 
(IN_TABLE IN PR_INCOME_STATMENT_PACKAGE.STATMENTS_T, IN_INDEX IN VARCHAR2) RETURN BOOLEAN AS 
STATMENT PR_INCOME_STATMENT_PACKAGE.STATMENT_T;
BEGIN
  STATMENT := IN_TABLE(IN_INDEX);
  RETURN TRUE;
EXCEPTION
WHEN OTHERS THEN
   RETURN FALSE;
END FN_TABLE_HAS_INDEX;

FUNCTION is_number (p_string IN VARCHAR2)
   RETURN INT
IS
   v_new_num NUMBER;
BEGIN
   v_new_num := TO_NUMBER(p_string, '999');
   RETURN 1;
EXCEPTION
WHEN VALUE_ERROR THEN
   RETURN 0;
END is_number;

PROCEDURE PR_DEBTS_TO_LOSES 
(SRC_CA_ID IN "Account".CA_ID%TYPE) AS 

ACCOUNTS TG_PARENT_ACCOUNT_PACKAGE.ACCOUNT_ARRAY_T;

DST TG_PARENT_ACCOUNT_PACKAGE.ACCOUNT_ID_T;

BEGIN
  -- Transfer all the entries for the loses (351) of this year to the cumulative loses (350)
  SELECT a.AC_ID, a.CA_ID 
  BULK COLLECT INTO ACCOUNTS 
  FROM "Account" a 
  WHERE a.CA_ID=SRC_CA_ID AND a.CA_ID = '351';
  
  DST.CA_ID := SRC_CA_ID;
  DST.AC_ID := '350';
  
  FOR idx in 1..ACCOUNTS.COUNT LOOP
    PR_REWIRE_JOURNAL_VAUCHER(ACCOUNTS(idx), DST);
  END LOOP;
  
  -- Transfer the unpaid captial (00 or 31) to the loses for the current year (351) 
  SELECT a.AC_ID, a.CA_ID 
  BULK COLLECT INTO ACCOUNTS 
  FROM "Account" a WHERE 
  a.CA_ID=SRC_CA_ID AND (a.AC_ID LIKE '00%' OR a.AC_ID LIKE '31%');
  
  DST.CA_ID := SRC_CA_ID;
  DST.AC_ID := '351';

  FOR idx in 1..ACCOUNTS.COUNT LOOP
    PR_REWIRE_JOURNAL_VAUCHER(ACCOUNTS(idx), DST);
  END LOOP;
  
END PR_DEBTS_TO_LOSES;

PROCEDURE PR_GENERAL_LEDGER (
  BUSINESS_ID IN "Business".BS_ID%TYPE,
  REPORT OUT PR_GL_PACKAGE.GL_T) AS

CA_ARRAY PR_GL_PACKAGE.CA_ARRAY_T;
AC_ARRAY PR_GL_PACKAGE.AC_ARRAY_T;
VE_ARRAY PR_GL_PACKAGE.VE_ARRAY_T;

TEMP "Vaucher Entry".JVE_DEBITS%TYPE;

PAGE PR_GL_PACKAGE.GL_PAGE_T;

BEGIN
  
  SELECT bhc.CA_ID BULK COLLECT INTO CA_ARRAY FROM "BS Has COA" bhc WHERE bhc.BS_ID=BUSINESS_ID;
  
  FOR idx in 1..CA_ARRAY.COUNT LOOP
  
    SELECT * BULK COLLECT INTO AC_ARRAY FROM "Account" a WHERE a.CA_ID=CA_ARRAY(idx);
    
    FOR jdx in 1..AC_ARRAY.COUNT LOOP

      REPORT(AC_ARRAY(jdx).AC_ID).ACC := AC_ARRAY(jdx);
      
      SELECT * BULK COLLECT INTO VE_ARRAY FROM "Vaucher Entry" v WHERE v.CA_ID=CA_ARRAY(idx) and v.AC_ID=AC_ARRAY(jdx).AC_ID;
      
      REPORT(AC_ARRAY(jdx).AC_ID).VE := PR_GL_PACKAGE.FN_MERGE_JVE(REPORT(AC_ARRAY(jdx).AC_ID).VE, VE_ARRAY);
    
    END LOOP;
  
  END LOOP;
  
  SELECT * BULK COLLECT INTO AC_ARRAY FROM "Account" a WHERE a.CA_ID in (SELECT bhc.CA_ID FROM "BS Has COA" bhc WHERE bhc.BS_ID=BUSINESS_ID);
  
  FOR idx in 1..AC_ARRAY.COUNT LOOP

    TEMP := 0;
  
    FOR kdx in 1..REPORT(AC_ARRAY(idx).AC_ID).VE.COUNT LOOP
    
      TEMP := TEMP + REPORT(AC_ARRAY(idx).AC_ID).VE(kdx).JVE_DEBITS - REPORT(AC_ARRAY(idx).AC_ID).VE(kdx).JVE_CREDITS;
      REPORT(AC_ARRAY(idx).AC_ID).BA(kdx) := TEMP;
    
    END LOOP;
  
  END LOOP;
  
END PR_GENERAL_LEDGER;

PROCEDURE PR_INCOME_STATMENT
(BUSINESS_ID IN "Business".BS_ID%TYPE) AS 

INCOME_STATMENT PR_INCOME_STATMENT_PACKAGE.INCOME_STATMENT_T;
VAUCHER_ENTRIES PR_INCOME_STATMENT_PACKAGE.VE_T;

TEMP PR_INCOME_STATMENT_PACKAGE.STATMENT_T;

BEGIN
  
  SELECT v.JVE_ID, v.JV_ID, v.SUG_ID, v.VET_ID, v.BS_ID, v.CA_ID, v.AC_ID, v.JVE_DESCRIPTION, v.JVE_DEBITS, v.JVE_CREDITS 
         BULK COLLECT INTO VAUCHER_ENTRIES
         FROM "Vaucher Entry" v, "BS Has COA" bhc
         WHERE v.CA_ID=bhc.CA_ID and bhc.BS_ID=BUSINESS_ID;

  INCOME_STATMENT.income_subtotal := 0;
  INCOME_STATMENT.loses_subtotal := 0;
  
  FOR idx in 1..VAUCHER_ENTRIES.COUNT LOOP
  
    IF SUBSTR(VAUCHER_ENTRIES(idx).AC_ID, 1 , 1) = '5' THEN
      
      IF FN_TABLE_HAS_INDEX(INCOME_STATMENT.INCOME, VAUCHER_ENTRIES(idx).AC_ID) THEN
        INCOME_STATMENT.INCOME(VAUCHER_ENTRIES(idx).AC_ID).TOTAL := INCOME_STATMENT.INCOME(VAUCHER_ENTRIES(idx).AC_ID).TOTAL + (VAUCHER_ENTRIES(idx).JVE_CREDITS-VAUCHER_ENTRIES(idx).JVE_DEBITS);
      ELSE
        INCOME_STATMENT.INCOME(VAUCHER_ENTRIES(idx).AC_ID).AC_ID := VAUCHER_ENTRIES(idx).AC_ID;
        INCOME_STATMENT.INCOME(VAUCHER_ENTRIES(idx).AC_ID).CA_ID := VAUCHER_ENTRIES(idx).CA_ID;
        INCOME_STATMENT.INCOME(VAUCHER_ENTRIES(idx).AC_ID).TOTAL := VAUCHER_ENTRIES(idx).JVE_CREDITS-VAUCHER_ENTRIES(idx).JVE_DEBITS;
      END IF;
      
      INCOME_STATMENT.income_subtotal := INCOME_STATMENT.income_subtotal + (VAUCHER_ENTRIES(idx).JVE_CREDITS-VAUCHER_ENTRIES(idx).JVE_DEBITS);
    
    ELSIF SUBSTR(VAUCHER_ENTRIES(idx).AC_ID, 1 , 1) = '6' THEN
      IF FN_TABLE_HAS_INDEX(INCOME_STATMENT.LOSES, VAUCHER_ENTRIES(idx).AC_ID) THEN
        INCOME_STATMENT.LOSES(VAUCHER_ENTRIES(idx).AC_ID).TOTAL := INCOME_STATMENT.LOSES(VAUCHER_ENTRIES(idx).AC_ID).TOTAL + (VAUCHER_ENTRIES(idx).JVE_CREDITS-VAUCHER_ENTRIES(idx).JVE_DEBITS);
      ELSE
        INCOME_STATMENT.LOSES(VAUCHER_ENTRIES(idx).AC_ID).AC_ID := VAUCHER_ENTRIES(idx).AC_ID;
        INCOME_STATMENT.LOSES(VAUCHER_ENTRIES(idx).AC_ID).CA_ID := VAUCHER_ENTRIES(idx).CA_ID;
        INCOME_STATMENT.LOSES(VAUCHER_ENTRIES(idx).AC_ID).TOTAL := VAUCHER_ENTRIES(idx).JVE_CREDITS-VAUCHER_ENTRIES(idx).JVE_DEBITS;
      END IF;
      
      INCOME_STATMENT.loses_subtotal := INCOME_STATMENT.loses_subtotal + (VAUCHER_ENTRIES(idx).JVE_CREDITS-VAUCHER_ENTRIES(idx).JVE_DEBITS);
    
    END IF;
  END LOOP;
  
END PR_INCOME_STATMENT;

PROCEDURE PR_NEXT_YAER_COPY
(ADDITION IN PR_NEXT_YEAR_PACKAGE.ACCOUNTS_T, 
 DELITION IN PR_NEXT_YEAR_PACKAGE.ACCOUNTS_T,
 SRC_CA_ID IN "Chart of Accounts".CA_ID%TYPE,
 DST_CA_ID IN "Chart of Accounts".CA_ID%TYPE) AS 

OLD_CA PR_NEXT_YEAR_PACKAGE.ACCOUNTS_T;
CA "Chart of Accounts"%ROWTYPE;

BEGIN
  
  SELECT DST_CA_ID, CA_DESCRIPTION, CA_YEAR+1 
  INTO CA
  FROM "Chart of Accounts" coa 
  WHERE coa.CA_ID=SRC_CA_ID;
  
  INSERT INTO "Chart of Accounts" (CA_ID, CA_DESCRIPTION, CA_YEAR) 
  VALUES (CA.CA_ID, CA.CA_DESCRIPTION, CA.CA_YEAR);
  
  SELECT DST_CA_ID, a.AC_ID, a.AC_NAME 
  BULK COLLECT INTO OLD_CA 
  FROM "Account" a 
  WHERE a.CA_ID=SRC_CA_ID;
  
  FORALL indx IN 1..OLD_CA.COUNT 
  INSERT INTO "Account" (CA_ID, AC_ID, AC_NAME)
  VALUES (OLD_CA(indx).CA_ID, OLD_CA(indx).AC_ID, OLD_CA(indx).AC_NAME);
  
  FORALL indx IN 1..DELITION.COUNT 
  DELETE FROM "Account" a
  WHERE a.AC_ID=DELITION(indx).AC_ID AND a.CA_ID=DST_CA_ID;
  
  FORALL indx IN 1..ADDITION.COUNT 
  INSERT INTO "Account" (CA_ID, AC_ID, AC_NAME)
  VALUES (DST_CA_ID, ADDITION(indx).AC_ID, ADDITION(indx).AC_NAME);
  
END PR_NEXT_YAER_COPY;

PROCEDURE PR_POPULATE_WITH_TEMPLATE
(BUSINESS_ID IN "Business".BS_ID%TYPE,
 FOR_BUSINESS_ID IN "Business".BS_ID%TYPE,
 JOURNAL_VAUCHER_CODE IN "Journal Vaucher".JV_CODE%TYPE,
 DOCUMENT_NUMBER IN "Journal Vaucher".JV_DOCUMENT_NUMBER%TYPE,
 SOFTWARE_USER_ID IN "Software User".SU_ID%TYPE, 
 DATE_OF_RECORDING IN "Journal Vaucher".JV_DATE_OF_RECORDING%TYPE,
 DATE_OF_CURRENCY IN "Journal Vaucher".JV_DATE_OF_CURRENCY%TYPE,
 AMOUNT IN "Vaucher Entry".JVE_DEBITS%TYPE) AS
 
TYPE jvts_t IS TABLE OF "Journal Vaucher Template Entry"%ROWTYPE INDEX BY BINARY_INTEGER;
 
jvt "Journal Vaucher Template"%ROWTYPE;
jvts jvts_t;

jv_id "Journal Vaucher".JV_ID%TYPE;

CHART_OF_ACCOUNTS "Chart of Accounts".CA_ID%TYPE;
SOFTWARE_USER_GROUP "Accountant User Group".SUG_ID%TYPE;

BEGIN

  SELECT * INTO jvt FROM "Journal Vaucher Template" vt 
                    WHERE vt.BS_ID=BUSINESS_ID AND vt.BS_PART_ID=FOR_BUSINESS_ID;  

  SELECT * BULK COLLECT INTO jvts FROM "Journal Vaucher Template Entry" vte WHERE vte.JVT_ID=jvt.JVT_ID;

  SELECT ca.CA_ID INTO CHART_OF_ACCOUNTS FROM "Chart of Accounts" ca, "BS Has COA" bhc 
  WHERE ca.CA_ID=bhc.CA_ID AND bhc.BS_ID=BUSINESS_ID AND 
  ca.CA_YEAR=(SELECT MAX(caa.CA_YEAR) FROM "Chart of Accounts" caa, "BS Has COA" bhc WHERE caa.CA_ID=bhc.CA_ID AND bhc.BS_ID=BUSINESS_ID);

  jv_id := JOURNAL_VAUCHER_SEQUENCER.NEXTVAL;

  INSERT INTO "Journal Vaucher" (JV_ID, CA_ID, SU_ID, JV_CODE, JV_DOCUMENT_NUMBER, JV_DATE_OF_RECORDING, JV_DATE_OF_CURRENCY)
  VALUES (jv_id, CHART_OF_ACCOUNTS, SOFTWARE_USER_ID, JOURNAL_VAUCHER_CODE, DOCUMENT_NUMBER, DATE_OF_RECORDING, DATE_OF_CURRENCY);
  
  DBMS_OUTPUT.PUT_LINE(TO_Char(SQL%ROWCOUNT)||' rows affected.');

  SELECT su.SUG_ID INTO SOFTWARE_USER_GROUP FROM "Software User" su WHERE su.SU_ID=SOFTWARE_USER_ID;

  FOR idx in 1..jvts.COUNT LOOP
    
    INSERT INTO "Vaucher Entry" (JVE_ID, JV_ID, SUG_ID, VET_ID, BS_ID, CA_ID, AC_ID, JVE_DESCRIPTION, JVE_DEBITS, JVE_CREDITS)
    VALUES(VAUCHER_ENTRY_SEQUENCER.NEXTVAL, jv_id, SOFTWARE_USER_GROUP, NULL, jvts(idx).BS_ID, jvts(idx).CA_ID, jvts(idx).AC_ID, jvts(idx).JVTE_DESCRIPTION, jvts(idx).JVTE_DEBITS*AMOUNT/100, jvts(idx).JVTE_CREDITS*AMOUNT/100);
    
    DBMS_OUTPUT.PUT_LINE(TO_Char(SQL%ROWCOUNT)||' rows affected.');
    
  END LOOP;

EXCEPTION
   WHEN OTHERS THEN ROLLBACK;

END PR_POPULATE_WITH_TEMPLATE;

PROCEDURE PR_REWIRE_JOURNAL_VAUCHER 
(SOURCE IN TG_PARENT_ACCOUNT_PACKAGE.ACCOUNT_ID_T, 
 TARGET IN TG_PARENT_ACCOUNT_PACKAGE.ACCOUNT_ID_T) AS 
BEGIN
  UPDATE "Vaucher Entry" v SET v.AC_ID=TARGET.AC_ID WHERE 
  v.AC_ID=SOURCE.AC_ID AND v.CA_ID=SOURCE.CA_ID;
END PR_REWIRE_JOURNAL_VAUCHER;

PROCEDURE PR_REWIRE_JVT
(SOURCE IN TG_PARENT_ACCOUNT_PACKAGE.ACCOUNT_ID_T, 
 TARGET IN TG_PARENT_ACCOUNT_PACKAGE.ACCOUNT_ID_T) AS 
BEGIN
  UPDATE "Journal Vaucher Template Entry" v SET v.AC_ID=TARGET.AC_ID WHERE 
  v.AC_ID=SOURCE.AC_ID AND v.CA_ID=SOURCE.CA_ID;
END PR_REWIRE_JVT;

END PR_MAIN_PACKAGE;